<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="0.0.0" doxygen_gitid="000000000000000000000000000000000000000">
  <compound kind="file">
    <name>code.h</name>
    <filename>code_8h.html</filename>
    <class kind="struct">test::struct_1</class>
    <class kind="struct">test::struct_1::nested_struct</class>
    <class kind="class">test::class_1</class>
    <class kind="class">test::template_class_1</class>
    <namespace>test</namespace>
    <namespace>test::nested</namespace>
    <namespace>test::empty</namespace>
    <concept>test::concept_1</concept>
    <concept>test::nested::concept_2</concept>
    <member kind="define">
      <type>#define</type>
      <name>KEK</name>
      <anchorfile>code_8h.html</anchorfile>
      <anchor>a867e1e9e6c924393462cf7c1a78c6c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>a_shit_typedef</name>
      <anchorfile>namespacetest.html</anchorfile>
      <anchor>a51ed0e00636746f407a20697efc8518e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>a_typedef</name>
      <anchorfile>namespacetest.html</anchorfile>
      <anchor>a011ffb640026d2f49f9c73fe09d88cfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>a_typedef_template</name>
      <anchorfile>namespacetest.html</anchorfile>
      <anchor>ab80f438f7d1d6d6e3b184b7ce32df687</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>unscoped_enum</name>
      <anchorfile>namespacetest.html</anchorfile>
      <anchor>ac1a212ff6fd8b8aa63bd0d5536ae7065</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LEGACY_ENUM_VAL_0</name>
      <anchorfile>namespacetest.html</anchorfile>
      <anchor>ac1a212ff6fd8b8aa63bd0d5536ae7065a3b6f77dbd09e17c5e8a30dcd3474012f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LEGACY_ENUM_VAL_1</name>
      <anchorfile>namespacetest.html</anchorfile>
      <anchor>ac1a212ff6fd8b8aa63bd0d5536ae7065af18ad5a3bf0d316003544836a8734fd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LEGACY_ENUM_VAL_2</name>
      <anchorfile>namespacetest.html</anchorfile>
      <anchor>ac1a212ff6fd8b8aa63bd0d5536ae7065a731c49ced9fc7748acfebc0a4910494d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>scoped_enum</name>
      <anchorfile>namespacetest.html</anchorfile>
      <anchor>a393facd551443a4aaea74c533c2bce6f</anchor>
      <arglist></arglist>
      <enumvalue file="namespacetest.html" anchor="a393facd551443a4aaea74c533c2bce6fa209e4404bac5df6700a512df9e988ba3">val_0</enumvalue>
      <enumvalue file="namespacetest.html" anchor="a393facd551443a4aaea74c533c2bce6fad69dff41cc115965adfeaa0f58fed641">val_1</enumvalue>
      <enumvalue file="namespacetest.html" anchor="a393facd551443a4aaea74c533c2bce6fa3745be12e7d2d79a55682a6b1ef5863c">val_2</enumvalue>
    </member>
    <member kind="function">
      <type>void</type>
      <name>a_friend_function</name>
      <anchorfile>namespacetest.html</anchorfile>
      <anchor>a14eee7dd5169cc088aad164c5fcb1800</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::uint8_t</type>
      <name>do_the_thing</name>
      <anchorfile>namespacetest.html</anchorfile>
      <anchor>a011c6f27e90f228cd68be9def15bc076</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>do_the_other_thing</name>
      <anchorfile>namespacetest.html</anchorfile>
      <anchor>ae66b7e2e94f84934cff5de3e512ce0ee</anchor>
      <arglist>(U u) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>do_the_thing_automatically</name>
      <anchorfile>namespacetest.html</anchorfile>
      <anchor>af2e6008ff8ee50f6cda80da681d44348</anchor>
      <arglist>() -&gt; int</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>foo</name>
      <anchorfile>namespacetest.html</anchorfile>
      <anchor>a47137b30af06ae000dc60125b3a2cf37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>inline_variable</name>
      <anchorfile>namespacetest.html</anchorfile>
      <anchor>af2f5b0612e98ea3ef9de39eb10981879</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>code.h</name>
    <filename>subfolder_2code_8h.html</filename>
  </compound>
  <compound kind="class">
    <name>test::class_1</name>
    <filename>classtest_1_1class__1.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>public_typedef</name>
      <anchorfile>classtest_1_1class__1.html</anchorfile>
      <anchor>a52150fb93a5946c0d2fca381f99f426f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>public_function</name>
      <anchorfile>classtest_1_1class__1.html</anchorfile>
      <anchor>a6b372d2af2e8e874869f0ddf50a306fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr struct_1</type>
      <name>public_static_function</name>
      <anchorfile>classtest_1_1class__1.html</anchorfile>
      <anchor>af2caa02646ff203339faf41a0efc4b20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>public_variable</name>
      <anchorfile>classtest_1_1class__1.html</anchorfile>
      <anchor>a1942e4b40fc0cc1b939b24d1c5f4e54c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::byte</type>
      <name>public_static_variable</name>
      <anchorfile>classtest_1_1class__1.html</anchorfile>
      <anchor>ae05cfedbf34e9f128e87410c09ad3780</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>int</type>
      <name>protected_typedef</name>
      <anchorfile>classtest_1_1class__1.html</anchorfile>
      <anchor>aa57cecf6a75b7d9a7343b06706f3863c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>protected_function</name>
      <anchorfile>classtest_1_1class__1.html</anchorfile>
      <anchor>ab61d354f51a90bb49d38d22e7a7d7f48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static constexpr bool</type>
      <name>protected_static_function</name>
      <anchorfile>classtest_1_1class__1.html</anchorfile>
      <anchor>ac4b22b5c1e50ba1a06f0319566252bb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>protected_variable</name>
      <anchorfile>classtest_1_1class__1.html</anchorfile>
      <anchor>ae4d8ef41c2f2be17d38d9eac40e53699</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static constexpr bool</type>
      <name>protected_static_variable</name>
      <anchorfile>classtest_1_1class__1.html</anchorfile>
      <anchor>a330993e9b2ae74c6db1a28553759fe96</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>a_friend_function</name>
      <anchorfile>classtest_1_1class__1.html</anchorfile>
      <anchor>acca95119536ae9a653b949e083e88bd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>another_friend_function</name>
      <anchorfile>classtest_1_1class__1.html</anchorfile>
      <anchor>aa74543381abc687ab6e8d46d78e26bf1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>test::struct_1::nested_struct</name>
    <filename>structtest_1_1struct__1_1_1nested__struct.html</filename>
  </compound>
  <compound kind="struct">
    <name>test::struct_1</name>
    <filename>structtest_1_1struct__1.html</filename>
    <class kind="struct">test::struct_1::nested_struct</class>
    <member kind="enumeration">
      <type></type>
      <name>nested_enum</name>
      <anchorfile>structtest_1_1struct__1.html</anchorfile>
      <anchor>a2d7cf0473e91c0a7815b11dd2f213f0c</anchor>
      <arglist></arglist>
      <enumvalue file="structtest_1_1struct__1.html" anchor="a2d7cf0473e91c0a7815b11dd2f213f0ca209e4404bac5df6700a512df9e988ba3">val_0</enumvalue>
      <enumvalue file="structtest_1_1struct__1.html" anchor="a2d7cf0473e91c0a7815b11dd2f213f0cad69dff41cc115965adfeaa0f58fed641">val_1</enumvalue>
      <enumvalue file="structtest_1_1struct__1.html" anchor="a2d7cf0473e91c0a7815b11dd2f213f0ca3745be12e7d2d79a55682a6b1ef5863c">val_2</enumvalue>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>static_variable</name>
      <anchorfile>structtest_1_1struct__1.html</anchorfile>
      <anchor>a93dfbf581e6e3abb295161832143dc75</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>test::template_class_1</name>
    <filename>classtest_1_1template__class__1.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="concept">
    <name>test::concept_1</name>
    <filename>concepttest_1_1concept__1.html</filename>
  </compound>
  <compound kind="concept">
    <name>test::nested::concept_2</name>
    <filename>concepttest_1_1nested_1_1concept__2.html</filename>
  </compound>
  <compound kind="namespace">
    <name>test</name>
    <filename>namespacetest.html</filename>
    <namespace>test::empty</namespace>
    <namespace>test::nested</namespace>
    <class kind="class">test::class_1</class>
    <class kind="struct">test::struct_1</class>
    <class kind="class">test::template_class_1</class>
    <concept>test::concept_1</concept>
    <member kind="typedef">
      <type>int</type>
      <name>a_shit_typedef</name>
      <anchorfile>namespacetest.html</anchorfile>
      <anchor>a51ed0e00636746f407a20697efc8518e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>a_typedef</name>
      <anchorfile>namespacetest.html</anchorfile>
      <anchor>a011ffb640026d2f49f9c73fe09d88cfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>a_typedef_template</name>
      <anchorfile>namespacetest.html</anchorfile>
      <anchor>ab80f438f7d1d6d6e3b184b7ce32df687</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>unscoped_enum</name>
      <anchorfile>namespacetest.html</anchorfile>
      <anchor>ac1a212ff6fd8b8aa63bd0d5536ae7065</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LEGACY_ENUM_VAL_0</name>
      <anchorfile>namespacetest.html</anchorfile>
      <anchor>ac1a212ff6fd8b8aa63bd0d5536ae7065a3b6f77dbd09e17c5e8a30dcd3474012f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LEGACY_ENUM_VAL_1</name>
      <anchorfile>namespacetest.html</anchorfile>
      <anchor>ac1a212ff6fd8b8aa63bd0d5536ae7065af18ad5a3bf0d316003544836a8734fd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LEGACY_ENUM_VAL_2</name>
      <anchorfile>namespacetest.html</anchorfile>
      <anchor>ac1a212ff6fd8b8aa63bd0d5536ae7065a731c49ced9fc7748acfebc0a4910494d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>scoped_enum</name>
      <anchorfile>namespacetest.html</anchorfile>
      <anchor>a393facd551443a4aaea74c533c2bce6f</anchor>
      <arglist></arglist>
      <enumvalue file="namespacetest.html" anchor="a393facd551443a4aaea74c533c2bce6fa209e4404bac5df6700a512df9e988ba3">val_0</enumvalue>
      <enumvalue file="namespacetest.html" anchor="a393facd551443a4aaea74c533c2bce6fad69dff41cc115965adfeaa0f58fed641">val_1</enumvalue>
      <enumvalue file="namespacetest.html" anchor="a393facd551443a4aaea74c533c2bce6fa3745be12e7d2d79a55682a6b1ef5863c">val_2</enumvalue>
    </member>
    <member kind="function">
      <type>void</type>
      <name>a_friend_function</name>
      <anchorfile>namespacetest.html</anchorfile>
      <anchor>a14eee7dd5169cc088aad164c5fcb1800</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::uint8_t</type>
      <name>do_the_thing</name>
      <anchorfile>namespacetest.html</anchorfile>
      <anchor>a011c6f27e90f228cd68be9def15bc076</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>do_the_other_thing</name>
      <anchorfile>namespacetest.html</anchorfile>
      <anchor>ae66b7e2e94f84934cff5de3e512ce0ee</anchor>
      <arglist>(U u) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>do_the_thing_automatically</name>
      <anchorfile>namespacetest.html</anchorfile>
      <anchor>af2e6008ff8ee50f6cda80da681d44348</anchor>
      <arglist>() -&gt; int</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>foo</name>
      <anchorfile>namespacetest.html</anchorfile>
      <anchor>a47137b30af06ae000dc60125b3a2cf37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>inline_variable</name>
      <anchorfile>namespacetest.html</anchorfile>
      <anchor>af2f5b0612e98ea3ef9de39eb10981879</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>test::empty</name>
    <filename>namespacetest_1_1empty.html</filename>
  </compound>
  <compound kind="namespace">
    <name>test::nested</name>
    <filename>namespacetest_1_1nested.html</filename>
    <concept>test::nested::concept_2</concept>
  </compound>
</tagfile>
