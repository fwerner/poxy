<?xml version='1.0' encoding='UTF-8'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="0.0.0" xml:lang="en-US">
	<compounddef id="code_8h" kind="file" language="C++">
		<compoundname>code.h</compoundname>
		<innerclass refid="structtest_1_1struct__1" prot="public">test::struct_1</innerclass>
		<innerclass refid="structtest_1_1struct__1_1_1nested__struct" prot="public">test::struct_1::nested_struct</innerclass>
		<innerclass refid="classtest_1_1class__1" prot="public">test::class_1</innerclass>
		<innerclass refid="classtest_1_1template__class__1" prot="public">test::template_class_1</innerclass>
		<innernamespace refid="namespacetest">test</innernamespace>
		<innernamespace refid="namespacetest_1_1nested">test::nested</innernamespace>
		<innernamespace refid="namespacetest_1_1empty">test::empty</innernamespace>
		<sectiondef kind="define">
			<memberdef kind="define" id="code_8h_1a867e1e9e6c924393462cf7c1a78c6c3e" prot="public" static="no">
				<name>KEK</name>
				<initializer>1</initializer><briefdescription>
					<para>A macro. </para>
				</briefdescription>
				<detaileddescription>
					<para>More info. </para>
				</detaileddescription>
				<inbodydescription></inbodydescription>
				<location file="src/code.h" line="32" column="9" bodyfile="src/code.h" bodystart="32" bodyend="-1"/>
			</memberdef>
			<memberdef kind="define" id="group__group_1gab8f35b5fe5a9047e142acaef9b5336ca" prot="public" static="no">
				<name>KEK_IN_GROUP</name>
				<initializer>1</initializer><briefdescription>
					<para>A macro inside a group. </para>
				</briefdescription>
				<detaileddescription>
					<para>More info. </para>
				</detaileddescription>
				<inbodydescription></inbodydescription>
				<location file="src/code.h" line="42" column="9" bodyfile="src/code.h" bodystart="42" bodyend="-1"/>
			</memberdef>
		</sectiondef>
		<sectiondef kind="enum">
			<memberdef kind="enum" id="namespacetest_1a393facd551443a4aaea74c533c2bce6f" prot="public" static="no" strong="yes">
				<type>unsigned</type>
				<name>scoped_enum</name>
				<qualifiedname>test::scoped_enum</qualifiedname>
				<enumvalue id="namespacetest_1a393facd551443a4aaea74c533c2bce6fa209e4404bac5df6700a512df9e988ba3" prot="public">
					<name>val_0</name>
					<briefdescription>
						<para>Value zero. </para>
					</briefdescription>
					<detaileddescription></detaileddescription>
				</enumvalue>
				<enumvalue id="namespacetest_1a393facd551443a4aaea74c533c2bce6fad69dff41cc115965adfeaa0f58fed641" prot="public">
					<name>val_1</name>
					<initializer>= 1</initializer><briefdescription>
						<para>Value one. </para>
					</briefdescription>
					<detaileddescription></detaileddescription>
				</enumvalue>
				<enumvalue id="namespacetest_1a393facd551443a4aaea74c533c2bce6fa3745be12e7d2d79a55682a6b1ef5863c" prot="public">
					<name>val_2</name>
					<initializer>= 2</initializer><briefdescription>
						<para>Value two. </para>
					</briefdescription>
					<detaileddescription></detaileddescription>
				</enumvalue>
				<briefdescription>
					<para>A C++11 scoped enum. </para>
				</briefdescription>
				<detaileddescription>
					<para>More info. </para>
				</detaileddescription>
				<inbodydescription></inbodydescription>
				<location file="src/code.h" line="247" column="1" bodyfile="src/code.h" bodystart="248" bodyend="254"/>
			</memberdef>
			<memberdef kind="enum" id="namespacetest_1ac1a212ff6fd8b8aa63bd0d5536ae7065" prot="public" static="no" strong="no">
				<type/>
				<name>unscoped_enum</name>
				<qualifiedname>test::unscoped_enum</qualifiedname>
				<enumvalue id="namespacetest_1ac1a212ff6fd8b8aa63bd0d5536ae7065a3b6f77dbd09e17c5e8a30dcd3474012f" prot="public">
					<name>LEGACY_ENUM_VAL_0</name>
					<briefdescription>
						<para>Value zero. </para>
					</briefdescription>
					<detaileddescription></detaileddescription>
				</enumvalue>
				<enumvalue id="namespacetest_1ac1a212ff6fd8b8aa63bd0d5536ae7065af18ad5a3bf0d316003544836a8734fd4" prot="public">
					<name>LEGACY_ENUM_VAL_1</name>
					<initializer>= 1</initializer><briefdescription>
						<para>Value one. </para>
					</briefdescription>
					<detaileddescription></detaileddescription>
				</enumvalue>
				<enumvalue id="namespacetest_1ac1a212ff6fd8b8aa63bd0d5536ae7065a731c49ced9fc7748acfebc0a4910494d" prot="public">
					<name>LEGACY_ENUM_VAL_2</name>
					<initializer>= 2</initializer><briefdescription>
						<para>Value two. </para>
					</briefdescription>
					<detaileddescription></detaileddescription>
				</enumvalue>
				<briefdescription>
					<para>A pre-C++11 unscoped enum. </para>
				</briefdescription>
				<detaileddescription>
					<para>More info. </para>
				</detaileddescription>
				<inbodydescription></inbodydescription>
				<location file="src/code.h" line="236" column="1" bodyfile="src/code.h" bodystart="237" bodyend="243"/>
			</memberdef>
		</sectiondef>
		<sectiondef kind="typedef">
			<memberdef kind="typedef" id="namespacetest_1a51ed0e00636746f407a20697efc8518e" prot="public" static="no">
				<type>int</type>
				<definition>typedef int test::a_shit_typedef</definition>
				<argsstring/>
				<name>a_shit_typedef</name>
				<qualifiedname>test::a_shit_typedef</qualifiedname>
				<briefdescription>
					<para>An old-school typedef. </para>
				</briefdescription>
				<detaileddescription>
					<para>More info. </para>
				</detaileddescription>
				<inbodydescription></inbodydescription>
				<location file="src/code.h" line="278" column="13" bodyfile="src/code.h" bodystart="278" bodyend="-1"/>
			</memberdef>
			<memberdef kind="typedef" id="namespacetest_1af3b055b49aff8d48bea92e5f226daa5d" prot="public" static="no">
				<type>int</type>
				<definition>using test::a_typedef =  int</definition>
				<argsstring/>
				<name>a_typedef</name>
				<qualifiedname>test::a_typedef</qualifiedname>
				<briefdescription>
					<para>A C++11 'using' typedef. </para>
				</briefdescription>
				<detaileddescription>
					<para>More info. </para>
				</detaileddescription>
				<inbodydescription></inbodydescription>
				<location file="src/code.h" line="282" column="1" bodyfile="src/code.h" bodystart="282" bodyend="-1"/>
			</memberdef>
			<memberdef kind="typedef" id="namespacetest_1a58dc421199859607c527ded8e3d87bae" prot="public" static="no">
				<templateparamlist>
					<param>
						<type>typename T</type>
					</param>
				</templateparamlist>
				<type>T</type>
				<definition>using test::a_typedef_template =  T</definition>
				<argsstring/>
				<name>a_typedef_template</name>
				<qualifiedname>test::a_typedef_template</qualifiedname>
				<briefdescription>
					<para>A C++11 'using' typedef template. </para>
				</briefdescription>
				<detaileddescription>
					<para>More info. </para>
				</detaileddescription>
				<inbodydescription></inbodydescription>
				<location file="src/code.h" line="287" column="1" bodyfile="src/code.h" bodystart="287" bodyend="-1"/>
			</memberdef>
		</sectiondef>
		<sectiondef kind="var">
			<memberdef kind="variable" id="namespacetest_1af2f5b0612e98ea3ef9de39eb10981879" prot="public" static="no" constexpr="yes" mutable="no">
				<type>bool</type>
				<definition>bool test::inline_variable</definition>
				<argsstring/>
				<name>inline_variable</name>
				<qualifiedname>test::inline_variable</qualifiedname>
				<initializer>= false</initializer><briefdescription>
					<para>An inline variable. </para>
				</briefdescription>
				<detaileddescription>
					<para>More info. </para>
				</detaileddescription>
				<inbodydescription></inbodydescription>
				<location file="src/code.h" line="98" column="23" bodyfile="src/code.h" bodystart="98" bodyend="-1"/>
			</memberdef>
		</sectiondef>
		<sectiondef kind="func">
			<memberdef kind="function" id="namespacetest_1a14eee7dd5169cc088aad164c5fcb1800" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>void</type>
				<definition>void test::a_friend_function</definition>
				<argsstring>()</argsstring>
				<name>a_friend_function</name>
				<qualifiedname>test::a_friend_function</qualifiedname>
				<briefdescription>
					<para>A function that appears as a friend to a <ref refid="classtest_1_1class__1" kindref="compound">test::class_1</ref>. </para>
				</briefdescription>
				<detaileddescription>
					<para>More info. </para>
				</detaileddescription>
				<inbodydescription></inbodydescription>
				<location file="src/code.h" line="94" column="6" declfile="src/code.h" declline="94" declcolumn="6"/>
			</memberdef>
			<memberdef kind="function" id="namespacetest_1af10bf287d581eb8aae63d450e3f848c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>__poxy_deduced_auto_return_type</type>
				<definition>auto test::a_function_with_a_deduced_return_type</definition>
				<argsstring>()</argsstring>
				<name>a_function_with_a_deduced_return_type</name>
				<qualifiedname>test::a_function_with_a_deduced_return_type</qualifiedname>
				<briefdescription>
					<para>A function with a deduced return type. </para>
				</briefdescription>
				<detaileddescription>
					<para>We shouldn't see a redundant "-&gt; auto" in the output. </para>
				</detaileddescription>
				<inbodydescription></inbodydescription>
				<location file="src/code.h" line="291" column="6" bodyfile="src/code.h" bodystart="291" bodyend="294"/>
			</memberdef>
			<memberdef kind="function" id="namespacetest_1ae66b7e2e94f84934cff5de3e512ce0ee" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
				<templateparamlist>
					<param>
						<type>typename T</type>
					</param>
					<param>
						<type>typename U</type>
					</param>
				</templateparamlist>
				<type>T</type>
				<definition>T test::do_the_other_thing</definition>
				<argsstring>(U u) noexcept</argsstring>
				<name>do_the_other_thing</name>
				<qualifiedname>test::do_the_other_thing</qualifiedname>
				<param>
					<type>U</type>
					<declname>u</declname>
				</param>
				<briefdescription>
					<para>A function template. </para>
				</briefdescription>
				<detaileddescription>
					<para>More info. <parameterlist kind="templateparam">
							<parameteritem>
								<parameternamelist>
									<parametername>T</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>A type. </para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>U</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>Another type. </para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>u</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>An argument. </para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>A T. </para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription></inbodydescription>
				<location file="src/code.h" line="267" column="13" bodyfile="src/code.h" bodystart="267" bodyend="270"/>
			</memberdef>
			<memberdef kind="function" id="namespacetest_1a011c6f27e90f228cd68be9def15bc076" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					<ref refid="cpp/types/integer" kindref="compound" external="D:/Repositories/poxy/src/poxy/cppreference-doxygen-web.tag.xml">std::uint8_t</ref>
				</type>
				<definition>std::uint8_t test::do_the_thing</definition>
				<argsstring>()</argsstring>
				<name>do_the_thing</name>
				<qualifiedname>test::do_the_thing</qualifiedname>
				<briefdescription>
					<para>A function. </para>
				</briefdescription>
				<detaileddescription>
					<para>More info. </para>
				</detaileddescription>
				<inbodydescription></inbodydescription>
				<location file="src/code.h" line="258" column="14" declfile="src/code.h" declline="258" declcolumn="14"/>
			</memberdef>
			<memberdef kind="function" id="namespacetest_1af2e6008ff8ee50f6cda80da681d44348" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>int</type>
				<definition>int test::do_the_thing_automatically</definition>
				<argsstring>()</argsstring>
				<name>do_the_thing_automatically</name>
				<qualifiedname>test::do_the_thing_automatically</qualifiedname>
				<briefdescription>
					<para>A function with a trailing return type. </para>
				</briefdescription>
				<detaileddescription>
					<para>More info. </para>
				</detaileddescription>
				<inbodydescription></inbodydescription>
				<location file="src/code.h" line="274" column="6" declfile="src/code.h" declline="274" declcolumn="6"/>
			</memberdef>
		</sectiondef>
		<briefdescription>
			<para>Code, yo. </para>
		</briefdescription>
		<detaileddescription>
			<para>More info.</para>
			<para>These should be linkified by the internal <computeroutput>autolinks</computeroutput> parser: <itemizedlist>
					<listitem>
						<para>RAII </para>
					</listitem>
					<listitem>
						<para>Resource acquisition is initialization </para>
					</listitem>
					<listitem>
						<para>Resource acquisition is initialization (RAII) </para>
					</listitem>
					<listitem>
						<para>CRTP </para>
					</listitem>
					<listitem>
						<para>Curiously-recurring template pattern </para>
					</listitem>
					<listitem>
						<para>Curiously-recurring template pattern (CRTP) </para>
					</listitem>
					<listitem>
						<para>EBO </para>
					</listitem>
					<listitem>
						<para>EBCO </para>
					</listitem>
					<listitem>
						<para>Empty base-class optimisation </para>
					</listitem>
					<listitem>
						<para>Empty base optimisation (EBO) </para>
					</listitem>
					<listitem>
						<para>UDL </para>
					</listitem>
					<listitem>
						<para>User-defined literal </para>
					</listitem>
					<listitem>
						<para>User-defined literal operator </para>
					</listitem>
					<listitem>
						<para>User-defined literal operators (UDLs) </para>
					</listitem>
					<listitem>
						<para>RVO </para>
					</listitem>
					<listitem>
						<para>NRVO </para>
					</listitem>
					<listitem>
						<para>Return value optimization </para>
					</listitem>
					<listitem>
						<para>Named return-value optimisation </para>
					</listitem>
					<listitem>
						<para>Named return-value optimisations (NRVO) </para>
					</listitem>
					<listitem>
						<para>INVOKE </para>
					</listitem>
					<listitem>
						<para>INVOKE&lt;R&gt; </para>
					</listitem>
					<listitem>
						<para>INVOKE expression </para>
					</listitem>
				</itemizedlist>
			</para>
		</detaileddescription>
		<location file="src/code.h"/>
	</compounddef>
</doxygen>